/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON schema for reference to Language entity based on runtime schema
 */
export type LanguageReference =
  | {
      /**
       * ISO 639-1 code of the language (ie. en)
       */
      Code: string
    }
  | number
/**
 * JSON schema for reference to Channel entity based on runtime schema
 */
export type ChannelReference =
  | {
      /**
       * The title of the Channel
       */
      title: string
    }
  | number
/**
 * JSON schema for reference to ContentCategory entity based on runtime schema
 */
export type ContentCategoryReference =
  | {
      /**
       * The name of the category
       */
      Name: string
    }
  | number
/**
 * JSON schema for reference to VideoMediaEncoding entity based on runtime schema
 */
export type VideoMediaEncodingReference =
  | {
      /**
       * The name of the encoding format (ie. H264_mpeg4)
       */
      Name: string
    }
  | number
/**
 * JSON schema for reference to HttpMediaLocation entity based on runtime schema
 */
export type HttpMediaLocationReference = number
/**
 * JSON schema for reference to JoystreamMediaLocation entity based on runtime schema
 */
export type JoystreamMediaLocationReference =
  | {
      /**
       * Id of the data object in the Joystream runtime dataDirectory module
       */
      dataObjectId: string
    }
  | number
/**
 * JSON schema for reference to MediaLocation entity based on runtime schema
 */
export type MediaLocationReference = number
/**
 * JSON schema for reference to VideoMedia entity based on runtime schema
 */
export type VideoMediaReference = number
/**
 * JSON schema for reference to KnownLicense entity based on runtime schema
 */
export type KnownLicenseReference =
  | {
      /**
       * Short, commonly recognized code of the licence (ie. CC_BY_SA)
       */
      code: string
    }
  | number
/**
 * JSON schema for reference to UserDefinedLicense entity based on runtime schema
 */
export type UserDefinedLicenseReference = number
/**
 * JSON schema for reference to License entity based on runtime schema
 */
export type LicenseReference = number

/**
 * JSON schema for entities based on Video runtime schema
 */
export interface VideoEntity {
  /**
   * Reference to member's channel
   */
  channel:
    | {
        new: ChannelEntity
      }
    | {
        existing: ChannelReference
      }
  /**
   * Reference to a video category
   */
  category:
    | {
        new: ContentCategoryEntity
      }
    | {
        existing: ContentCategoryReference
      }
  /**
   * The title of the video
   */
  title: string
  /**
   * The description of the Video
   */
  description: string
  /**
   * Video duration in seconds
   */
  duration: number
  /**
   * Video's kippable intro duration in seconds
   */
  skippableIntroDuration?: number
  /**
   * Video thumbnail url (recommended ratio: 16:9)
   */
  thumbnailURL: string
  /**
   * Video's main langauge
   */
  language?:
    | {
        new: LanguageEntity
      }
    | {
        existing: LanguageReference
      }
  /**
   * Reference to VideoMedia
   */
  media:
    | {
        new: VideoMediaEntity
      }
    | {
        existing: VideoMediaReference
      }
  /**
   * Whether or not Video contains marketing
   */
  hasMarketing?: boolean
  /**
   * If the Video was published on other platform before beeing published on Joystream - the original publication date
   */
  publishedBeforeJoystream?: number
  /**
   * Whether the Video is supposed to be publically displayed
   */
  isPublic: boolean
  /**
   * Whether the Video has been curated (verified) by a Curator
   */
  isCurated: boolean
  /**
   * Whether the Video contains explicit material.
   */
  isExplicit: boolean
  /**
   * A License the Video is published under
   */
  license:
    | {
        new: LicenseEntity
      }
    | {
        existing: LicenseReference
      }
}
/**
 * JSON schema for entities based on Channel runtime schema
 */
export interface ChannelEntity {
  /**
   * The title of the Channel
   */
  title: string
  /**
   * The description of a Channel
   */
  description: string
  /**
   * Url for Channel's cover (background) photo. Recommended ratio: 16:9.
   */
  coverPhotoUrl: string
  /**
   * Channel's avatar photo.
   */
  avatarPhotoURL: string
  /**
   * Flag signaling whether a channel is public.
   */
  isPublic: boolean
  /**
   * Flag signaling whether a channel is curated/verified.
   */
  isCurated: boolean
  /**
   * The primary langauge of the channel's content
   */
  language?:
    | {
        new: LanguageEntity
      }
    | {
        existing: LanguageReference
      }
}
/**
 * JSON schema for entities based on Language runtime schema
 */
export interface LanguageEntity {
  /**
   * The name of the language (ie. English)
   */
  Name: string
  /**
   * ISO 639-1 code of the language (ie. en)
   */
  Code: string
}
/**
 * JSON schema for entities based on ContentCategory runtime schema
 */
export interface ContentCategoryEntity {
  /**
   * The name of the category
   */
  Name: string
  /**
   * The description of the category
   */
  Description?: string
}
/**
 * JSON schema for entities based on VideoMedia runtime schema
 */
export interface VideoMediaEntity {
  /**
   * Encoding of the video media object
   */
  encoding:
    | {
        new: VideoMediaEncodingEntity
      }
    | {
        existing: VideoMediaEncodingReference
      }
  /**
   * Video media width in pixels
   */
  pixelWidth: number
  /**
   * Video media height in pixels
   */
  pixelHeight: number
  /**
   * Video media size in bytes
   */
  size?: number
  /**
   * Location of the video media object
   */
  location:
    | {
        new: MediaLocationEntity
      }
    | {
        existing: MediaLocationReference
      }
}
/**
 * JSON schema for entities based on VideoMediaEncoding runtime schema
 */
export interface VideoMediaEncodingEntity {
  /**
   * The name of the encoding format (ie. H264_mpeg4)
   */
  Name: string
}
/**
 * JSON schema for entities based on MediaLocation runtime schema
 */
export interface MediaLocationEntity {
  /**
   * A reference to HttpMediaLocation
   */
  httpMediaLocation?:
    | {
        new: HttpMediaLocationEntity
      }
    | {
        existing: HttpMediaLocationReference
      }
  /**
   * A reference to JoystreamMediaLocation
   */
  joystreamMediaLocation?:
    | {
        new: JoystreamMediaLocationEntity
      }
    | {
        existing: JoystreamMediaLocationReference
      }
}
/**
 * JSON schema for entities based on HttpMediaLocation runtime schema
 */
export interface HttpMediaLocationEntity {
  /**
   * The http url pointing to the media
   */
  url: string
  /**
   * The port to use when connecting to the http url (defaults to 80)
   */
  port?: number
}
/**
 * JSON schema for entities based on JoystreamMediaLocation runtime schema
 */
export interface JoystreamMediaLocationEntity {
  /**
   * Id of the data object in the Joystream runtime dataDirectory module
   */
  dataObjectId: string
}
/**
 * JSON schema for entities based on License runtime schema
 */
export interface LicenseEntity {
  /**
   * Reference to a known license
   */
  knownLicense?:
    | {
        new: KnownLicenseEntity
      }
    | {
        existing: KnownLicenseReference
      }
  /**
   * Reference to user-defined license
   */
  userDefinedLicense?:
    | {
        new: UserDefinedLicenseEntity
      }
    | {
        existing: UserDefinedLicenseReference
      }
}
/**
 * JSON schema for entities based on KnownLicense runtime schema
 */
export interface KnownLicenseEntity {
  /**
   * Short, commonly recognized code of the licence (ie. CC_BY_SA)
   */
  code: string
  /**
   * Full, descriptive name of the license (ie. Creative Commons - Attribution-NonCommercial-NoDerivs)
   */
  name?: string
  /**
   * Short description of the license conditions
   */
  description?: string
  /**
   * An url pointing to full license content
   */
  url?: string
}
/**
 * JSON schema for entities based on UserDefinedLicense runtime schema
 */
export interface UserDefinedLicenseEntity {
  /**
   * Custom license content
   */
  content: string
}
