name: run-network-tests
on:
  pull_request:
  workflow_dispatch:
    # TODO: add an input so dispatcher can specify a list of tests to run,
    # composed of the job ids separated by `:`
    # for eg.
    #   'network_tests_1:network_tests_3'
    #   'network_tests_2'
    # inputs:
    #   test_to_run:
    #     description: 'Tests to run'
    #     required: false
    #     default: 'all'

jobs:
  build_images:
    name: Build joystream/node
    runs-on: ubuntu-latest
    outputs:
      use_artifact: ${{ steps.compute_shasum.outputs.shasum }}-joystream-node-docker-image.tar.gz
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - id: compute_shasum
        name: Compute runtime code shasum
        run: |
          export RUNTIME_CODE_SHASUM=`scripts/runtime-code-shasum.sh`
          echo "::set-output name=shasum::${RUNTIME_CODE_SHASUM}"

      - name: Setup cache directory
        run: mkdir ~/docker-images

      - name: Cache docker images
        uses: actions/cache@v2
        env:
          cache-name: joystream-node-docker
        with:
          path: ~/docker-images
          key: ${{ env.cache-name }}-${{ steps.compute_shasum.outputs.shasum }}

      - name: Check if we have cached image
        continue-on-error: true
        run: |
          if [ -f ~/docker-images/joystream-node-docker-image.tar.gz ]; then
            docker load --input ~/docker-images/joystream-node-docker-image.tar.gz
            cp ~/docker-images/joystream-node-docker-image.tar.gz .
          fi

      - name: Check if we have pre-built image on Dockerhub
        continue-on-error: true
        run: |
          if ! [ -f joystream-node-docker-image.tar.gz ]; then
            docker pull joystream/node:${{ steps.compute_shasum.outputs.shasum }}
            docker image tag joystream/node:${{ steps.compute_shasum.outputs.shasum }} joystream/node:latest
            docker save --output joystream-node-docker-image.tar joystream/node:latest
            gzip joystream-node-docker-image.tar
            cp joystream-node-docker-image.tar.gz ~/docker-images/
          fi

      - name: Build new joystream/node image
        run: |
          if ! [ -f joystream-node-docker-image.tar.gz ]; then
            docker build . --file joystream-node.Dockerfile --tag joystream/node
            docker save --output joystream-node-docker-image.tar joystream/node
            gzip joystream-node-docker-image.tar
            cp joystream-node-docker-image.tar.gz ~/docker-images/
          fi

      - name: Save joystream/node image to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.compute_shasum.outputs.shasum }}-joystream-node-docker-image.tar.gz
          path: joystream-node-docker-image.tar.gz
  
  network_tests_1:
    name: Network Integration Runtime Tests
    if: contains(github.event.pull_request.labels.*.name, 'run-network-tests') || github.event.push != null
    needs: build_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build_images.outputs.use_artifact }}
      - name: Install artifacts
        run: |
          docker load --input joystream-node-docker-image.tar.gz
          docker images
      - name: Install packages and dependencies
        run: yarn install --frozen-lockfile
      - name: Ensure tests are runnable
        run: yarn workspace network-tests build
      - name: Execute network tests
        run: tests/network-tests/run-tests.sh

  network_tests_2:
    name: Query Node Tests (Placeholder)
    if: contains(github.event.pull_request.labels.*.name, 'run-network-tests') || github.event.push != null
    needs: build_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build_images.outputs.use_artifact }}
      - name: Install artifacts
        run: |
          docker load --input joystream-node-docker-image.tar.gz
          docker images
      - name: Install packages and dependencies
        run: yarn install --frozen-lockfile
      - name: Ensure tests are runnable
        run: yarn workspace network-tests build
      - name: Start chain
        run: docker-compose up -d
      # - name: Execute network tests
      #   run: yarn workspace network-tests test

  network_tests_3:
    name: Storage Node Tests
    if: contains(github.event.pull_request.labels.*.name, 'run-network-tests') || github.event.push != null
    needs: build_images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Get artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build_images.outputs.use_artifact }}
      - name: Install artifacts
        run: |
          docker load --input joystream-node-docker-image.tar.gz
          docker images
      - name: Install packages and dependencies
        run: |
          yarn install --frozen-lockfile
          yarn workspace storage-node build
      - name: Build storage node
        run: yarn workspace storage-node build
      - name: Start chain
        run: docker-compose up -d
      - name: Execute tests
        run: DEBUG=* yarn storage-cli dev-init